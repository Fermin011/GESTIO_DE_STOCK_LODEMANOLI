from aplicacion.backend.costos import controller
from datetime import date, datetime

def mostrar_resumen_general():
    """Muestra un resumen general de todos los costos e impuestos"""
    print("\n=== RESUMEN GENERAL DE COSTOS ===")
    
    resultado = controller.obtener_resumen_completo_controller()
    
    if resultado["success"]:
        data = resultado["data"]
        costos = data["costos_operativos"]
        impuestos = data["impuestos"]
        general = data["resumen_general"]
        
        print("-" * 70)
        print("üìä COSTOS OPERATIVOS:")
        print(f"   ‚Ä¢ Cantidad: {costos['cantidad']}")
        print(f"   ‚Ä¢ Total: ${costos['total']:,.2f}")
        print(f"   ‚Ä¢ Recurrentes: ${costos['recurrentes']:,.2f}")
        print(f"   ‚Ä¢ Una vez: ${costos['una_vez']:,.2f}")
        
        print("\nüí∞ IMPUESTOS:")
        print(f"   ‚Ä¢ Cantidad total: {impuestos['cantidad']}")
        print(f"   ‚Ä¢ Impuestos fijos: {impuestos['cantidad_fijo']} (${impuestos['total_fijo']:,.2f})")
        print(f"   ‚Ä¢ Impuestos porcentaje: {impuestos['cantidad_porcentaje']} ({impuestos['total_porcentaje']:.1f}%)")
        
        print(f"\nüéØ RESUMEN GENERAL:")
        print(f"   ‚Ä¢ Total costos fijos: ${general['total_costos_fijos']:,.2f}")
        print(f"   ‚Ä¢ Total porcentajes: {general['porcentajes_aplicables']:.1f}%")
        print("-" * 70)
    else:
        print(f"‚ùå {resultado['message']}")

def mostrar_costos_operativos():
    """Muestra todos los costos operativos activos"""
    resultado = controller.listar_costos_activos_controller()
    
    if resultado["success"]:
        costos = resultado["data"]["costos"]
        resumen = resultado["data"]["resumen"]
        
        print("\n=== COSTOS OPERATIVOS ACTIVOS ===")
        print("-" * 80)
        print(f"{'ID':<5} {'Nombre':<25} {'Monto':<12} {'Fecha Inicio':<12} {'Recurrente':<10} {'Estado':<8}")
        print("-" * 80)
        
        for costo in costos:
            recurrente = "S√≠" if costo['recurrente'] else "No"
            estado = "Activo" if costo['activo'] else "Inactivo"
            print(f"{costo['id']:<5} {costo['nombre']:<25} ${costo['monto']:<11,.0f} {costo['fecha_inicio']:<12} {recurrente:<10} {estado:<8}")
        
        print("-" * 80)
        print(f"üìä RESUMEN:")
        print(f"   ‚Ä¢ Total costos: {resumen['cantidad_costos']}")
        print(f"   ‚Ä¢ Monto total: ${resumen['total_costos']:,.2f}")
        print(f"   ‚Ä¢ Costos recurrentes: ${resumen['costos_recurrentes']:,.2f}")
        print(f"   ‚Ä¢ Costos una vez: ${resumen['costos_una_vez']:,.2f}")
        print("-" * 80)
    else:
        print(f"‚ùå {resultado['message']}")

def mostrar_impuestos():
    """Muestra todos los impuestos activos"""
    resultado = controller.listar_impuestos_activos_controller()
    
    if resultado["success"]:
        impuestos = resultado["data"]["impuestos"]
        resumen = resultado["data"]["resumen"]
        
        print("\n=== IMPUESTOS ACTIVOS ===")
        print("-" * 70)
        print(f"{'ID':<5} {'Nombre':<25} {'Tipo':<12} {'Valor':<12} {'Estado':<8}")
        print("-" * 70)
        
        for impuesto in impuestos:
            if impuesto['tipo'] == 'porcentaje':
                valor_display = f"{impuesto['valor']:.1f}%"
            else:
                valor_display = f"${impuesto['valor']:,.2f}"
            
            estado = "Activo" if impuesto['activo'] else "Inactivo"
            print(f"{impuesto['id']:<5} {impuesto['nombre']:<25} {impuesto['tipo']:<12} {valor_display:<12} {estado:<8}")
        
        print("-" * 70)
        print(f"üìä RESUMEN:")
        print(f"   ‚Ä¢ Total impuestos: {resumen['cantidad_impuestos']}")
        print(f"   ‚Ä¢ Impuestos fijos: {resumen['impuestos_fijo']} (${resumen['total_fijo']:,.2f})")
        print(f"   ‚Ä¢ Impuestos porcentaje: {resumen['impuestos_porcentaje']} ({resumen['total_porcentaje']:.1f}%)")
        print("-" * 70)
    else:
        print(f"‚ùå {resultado['message']}")

def crear_costo_operativo():
    """Maneja la creaci√≥n de un nuevo costo operativo"""
    print("\n=== CREAR COSTO OPERATIVO ===")
    
    try:
        nombre = input("Nombre del costo: ").strip()
        if not nombre:
            print("‚ùå El nombre es obligatorio")
            return
        
        monto_input = input("Monto: $").strip()
        monto = float(monto_input) if monto_input else None
        
        if monto is None or monto < 0:
            print("‚ùå Debe ingresar un monto v√°lido mayor o igual a 0")
            return
        
        fecha_input = input("Fecha de inicio (YYYY-MM-DD) [Enter para hoy]: ").strip()
        fecha_inicio = fecha_input if fecha_input else date.today().isoformat()
        
        recurrente_input = input("¬øEs recurrente? (s/N): ").lower().strip()
        recurrente = recurrente_input in ['s', 'si', 'y', 'yes']
        
        print(f"\nüìã Resumen:")
        print(f"   ‚Ä¢ Nombre: {nombre}")
        print(f"   ‚Ä¢ Monto: ${monto:,.2f}")
        print(f"   ‚Ä¢ Fecha inicio: {fecha_inicio}")
        print(f"   ‚Ä¢ Recurrente: {'S√≠' if recurrente else 'No'}")
        
        confirmar = input(f"\n¬øCrear este costo operativo? (s/N): ").lower()
        if confirmar != 's':
            print("Operaci√≥n cancelada.")
            return
        
        resultado = controller.crear_costo_operativo_controller(
            nombre=nombre,
            monto=monto,
            fecha_inicio=fecha_inicio,
            recurrente=recurrente
        )
        
        if resultado["success"]:
            data = resultado["data"]
            print(f"\n‚úÖ Costo operativo creado exitosamente!")
            print(f"   ID: {data['id']}")
            print(f"   Nombre: {data['nombre']}")
            print(f"   Monto: ${data['monto']:,.2f}")
        else:
            print(f"‚ùå Error: {resultado['message']}")
            
    except ValueError:
        print("‚ùå Entrada inv√°lida. Operaci√≥n cancelada.")

def crear_impuesto():
    """Maneja la creaci√≥n de un nuevo impuesto"""
    print("\n=== CREAR IMPUESTO ===")
    
    try:
        nombre = input("Nombre del impuesto: ").strip()
        if not nombre:
            print("‚ùå El nombre es obligatorio")
            return
        
        print("\nTipos disponibles:")
        print("1. porcentaje - Impuesto como porcentaje (ej: 21% IVA)")
        print("2. fijo - Impuesto como monto fijo (ej: $500 tasa municipal)")
        
        tipo_opcion = input("Seleccionar tipo (1 o 2): ").strip()
        
        if tipo_opcion == "1":
            tipo = "porcentaje"
            valor_input = input("Valor del porcentaje (0-100): ").strip()
            try:
                valor = float(valor_input)
                if valor < 0 or valor > 100:
                    print("‚ùå El porcentaje debe estar entre 0 y 100")
                    return
            except ValueError:
                print("‚ùå Valor de porcentaje inv√°lido")
                return
        elif tipo_opcion == "2":
            tipo = "fijo"
            valor_input = input("Monto fijo: $").strip()
            try:
                valor = float(valor_input)
                if valor < 0:
                    print("‚ùå El monto fijo no puede ser negativo")
                    return
            except ValueError:
                print("‚ùå Monto inv√°lido")
                return
        else:
            print("‚ùå Opci√≥n inv√°lida")
            return
        
        print(f"\nüìã Resumen:")
        print(f"   ‚Ä¢ Nombre: {nombre}")
        print(f"   ‚Ä¢ Tipo: {tipo}")
        if tipo == "porcentaje":
            print(f"   ‚Ä¢ Valor: {valor:.1f}%")
        else:
            print(f"   ‚Ä¢ Valor: ${valor:,.2f}")
        
        confirmar = input(f"\n¬øCrear este impuesto? (s/N): ").lower()
        if confirmar != 's':
            print("Operaci√≥n cancelada.")
            return
        
        resultado = controller.crear_impuesto_controller(
            nombre=nombre,
            tipo=tipo,
            valor=valor
        )
        
        if resultado["success"]:
            data = resultado["data"]
            print(f"\n‚úÖ Impuesto creado exitosamente!")
            print(f"   ID: {data['id']}")
            print(f"   Nombre: {data['nombre']}")
            print(f"   Tipo: {data['tipo']}")
            if data['tipo'] == 'porcentaje':
                print(f"   Valor: {data['valor']:.1f}%")
            else:
                print(f"   Valor: ${data['valor']:,.2f}")
        else:
            print(f"‚ùå Error: {resultado['message']}")
            
    except ValueError:
        print("‚ùå Entrada inv√°lida. Operaci√≥n cancelada.")

def actualizar_costo_operativo():
    """Actualiza un costo operativo existente"""
    print("\n=== ACTUALIZAR COSTO OPERATIVO ===")
    
    # Mostrar costos disponibles
    mostrar_costos_operativos()
    
    try:
        costo_id = int(input("\nID del costo a actualizar: ").strip())
        
        print("Dej√° en blanco los campos que no quieras cambiar:")
        
        nombre = input("Nuevo nombre: ").strip()
        nombre = nombre if nombre else None
        
        monto_input = input("Nuevo monto: $").strip()
        monto = float(monto_input) if monto_input else None
        
        fecha_input = input("Nueva fecha inicio (YYYY-MM-DD): ").strip()
        fecha_inicio = fecha_input if fecha_input else None
        
        recurrente_input = input("¬øEs recurrente? (s/n/Enter para no cambiar): ").lower().strip()
        if recurrente_input in ['s', 'si']:
            recurrente = True
        elif recurrente_input in ['n', 'no']:
            recurrente = False
        else:
            recurrente = None
        
        activo_input = input("¬øEst√° activo? (s/n/Enter para no cambiar): ").lower().strip()
        if activo_input in ['s', 'si']:
            activo = True
        elif activo_input in ['n', 'no']:
            activo = False
        else:
            activo = None
        
        # Verificar que al menos un campo se va a cambiar
        if all(x is None for x in [nombre, monto, fecha_inicio, recurrente, activo]):
            print("‚ö†Ô∏è  No se especificaron cambios.")
            return
        
        resultado = controller.actualizar_costo_operativo_controller(
            costo_id=costo_id,
            nombre=nombre,
            monto=monto,
            fecha_inicio=fecha_inicio,
            recurrente=recurrente,
            activo=activo
        )
        
        if resultado["success"]:
            data = resultado["data"]
            print(f"\n‚úÖ Costo operativo actualizado!")
            print(f"   Nombre: {data['nombre']}")
            print(f"   Monto: ${data['monto']:,.2f}")
            print(f"   Recurrente: {'S√≠' if data['recurrente'] else 'No'}")
            print(f"   Estado: {'Activo' if data['activo'] else 'Inactivo'}")
        else:
            print(f"‚ùå Error: {resultado['message']}")
            
    except ValueError:
        print("‚ùå ID inv√°lido. Operaci√≥n cancelada.")

def actualizar_impuesto():
    """Actualiza un impuesto existente"""
    print("\n=== ACTUALIZAR IMPUESTO ===")
    
    # Mostrar impuestos disponibles
    mostrar_impuestos()
    
    try:
        impuesto_id = int(input("\nID del impuesto a actualizar: ").strip())
        
        print("Dej√° en blanco los campos que no quieras cambiar:")
        
        nombre = input("Nuevo nombre: ").strip()
        nombre = nombre if nombre else None
        
        tipo_input = input("Nuevo tipo (porcentaje/fijo): ").strip()
        tipo = tipo_input if tipo_input in ['porcentaje', 'fijo'] else None
        
        valor_input = input("Nuevo valor: ").strip()
        valor = float(valor_input) if valor_input else None
        
        activo_input = input("¬øEst√° activo? (s/n/Enter para no cambiar): ").lower().strip()
        if activo_input in ['s', 'si']:
            activo = True
        elif activo_input in ['n', 'no']:
            activo = False
        else:
            activo = None
        
        # Verificar que al menos un campo se va a cambiar
        if all(x is None for x in [nombre, tipo, valor, activo]):
            print("‚ö†Ô∏è  No se especificaron cambios.")
            return
        
        resultado = controller.actualizar_impuesto_controller(
            impuesto_id=impuesto_id,
            nombre=nombre,
            tipo=tipo,
            valor=valor,
            activo=activo
        )
        
        if resultado["success"]:
            data = resultado["data"]
            print(f"\n‚úÖ Impuesto actualizado!")
            print(f"   Nombre: {data['nombre']}")
            print(f"   Tipo: {data['tipo']}")
            if data['tipo'] == 'porcentaje':
                print(f"   Valor: {data['valor']:.1f}%")
            else:
                print(f"   Valor: ${data['valor']:,.2f}")
            print(f"   Estado: {'Activo' if data['activo'] else 'Inactivo'}")
        else:
            print(f"‚ùå Error: {resultado['message']}")
            
    except ValueError:
        print("‚ùå ID inv√°lido. Operaci√≥n cancelada.")

def eliminar_costo_operativo():
    """Desactiva un costo operativo"""
    print("\n=== ELIMINAR COSTO OPERATIVO ===")
    
    # Mostrar costos disponibles
    mostrar_costos_operativos()
    
    try:
        costo_id = int(input("\nID del costo a eliminar: ").strip())
        
        confirmar = input("¬øConfirmar eliminaci√≥n? (escrib√≠ 'ELIMINAR'): ")
        
        if confirmar != 'ELIMINAR':
            print("Operaci√≥n cancelada.")
            return
        
        resultado = controller.eliminar_costo_operativo_controller(costo_id)
        
        if resultado["success"]:
            data = resultado["data"]
            print(f"\n‚úÖ Costo operativo desactivado!")
            print(f"   ID: {data['id']}")
            print(f"   Nombre: {data['nombre']}")
            print(f"   Monto: ${data['monto']:,.2f}")
        else:
            print(f"‚ùå Error: {resultado['message']}")
            
    except ValueError:
        print("‚ùå ID inv√°lido. Operaci√≥n cancelada.")

def eliminar_impuesto():
    """Desactiva un impuesto"""
    print("\n=== ELIMINAR IMPUESTO ===")
    
    # Mostrar impuestos disponibles
    mostrar_impuestos()
    
    try:
        impuesto_id = int(input("\nID del impuesto a eliminar: ").strip())
        
        confirmar = input("¬øConfirmar eliminaci√≥n? (escrib√≠ 'ELIMINAR'): ")
        
        if confirmar != 'ELIMINAR':
            print("Operaci√≥n cancelada.")
            return
        
        resultado = controller.eliminar_impuesto_controller(impuesto_id)
        
        if resultado["success"]:
            data = resultado["data"]
            print(f"\n‚úÖ Impuesto desactivado!")
            print(f"   ID: {data['id']}")
            print(f"   Nombre: {data['nombre']}")
            print(f"   Tipo: {data['tipo']}")
            if data['tipo'] == 'porcentaje':
                print(f"   Valor: {data['valor']:.1f}%")
            else:
                print(f"   Valor: ${data['valor']:,.2f}")
        else:
            print(f"‚ùå Error: {resultado['message']}")
            
    except ValueError:
        print("‚ùå ID inv√°lido. Operaci√≥n cancelada.")

def gestion_costos_operativos():
    """Submen√∫ para gesti√≥n de costos operativos"""
    while True:
        print("\n=== GESTI√ìN COSTOS OPERATIVOS ===")
        print("1. Ver costos operativos")
        print("2. Crear nuevo costo")
        print("3. Actualizar costo existente")
        print("4. Eliminar costo")
        print("5. Volver al men√∫ principal")
        
        opcion = input("Eleg√≠ una opci√≥n: ")
        
        if opcion == "1":
            mostrar_costos_operativos()
        elif opcion == "2":
            crear_costo_operativo()
        elif opcion == "3":
            actualizar_costo_operativo()
        elif opcion == "4":
            eliminar_costo_operativo()
        elif opcion == "5":
            break
        else:
            print("‚ùå Opci√≥n inv√°lida.")

def gestion_impuestos():
    """Submen√∫ para gesti√≥n de impuestos"""
    while True:
        print("\n=== GESTI√ìN IMPUESTOS ===")
        print("1. Ver impuestos")
        print("2. Crear nuevo impuesto")
        print("3. Actualizar impuesto existente")
        print("4. Eliminar impuesto")
        print("5. Volver al men√∫ principal")
        
        opcion = input("Eleg√≠ una opci√≥n: ")
        
        if opcion == "1":
            mostrar_impuestos()
        elif opcion == "2":
            crear_impuesto()
        elif opcion == "3":
            actualizar_impuesto()
        elif opcion == "4":
            eliminar_impuesto()
        elif opcion == "5":
            break
        else:
            print("‚ùå Opci√≥n inv√°lida.")

def mostrar_registros_eliminados():
    """Muestra informaci√≥n sobre los registros marcados como eliminados"""
    print("\n=== REGISTROS MARCADOS COMO ELIMINADOS ===")
    
    resultado = controller.contar_registros_eliminados_controller()
    
    if resultado["success"]:
        data = resultado["data"]
        total = data["total"]
        costos_count = data["costos_eliminados"]
        impuestos_count = data["impuestos_eliminados"]
        
        print(f"üìä {resultado['message']}")
        
        if total == 0:
            print("‚úÖ No hay registros eliminados para limpiar")
            return
        
        print(f"\nüìã Distribuci√≥n:")
        print(f"   ‚Ä¢ Costos operativos eliminados: {costos_count}")
        print(f"   ‚Ä¢ Impuestos eliminados: {impuestos_count}")
        print(f"   ‚Ä¢ TOTAL: {total}")
        
        # Mostrar ejemplos de costos operativos
        if data["ejemplos_costos"]:
            print(f"\nüíº Ejemplos de costos operativos eliminados:")
            print("-" * 60)
            print(f"{'Nombre':<25} {'Monto':<12} {'Recurrente':<12}")
            print("-" * 60)
            
            for ejemplo in data["ejemplos_costos"]:
                recurrente = "S√≠" if ejemplo['recurrente'] else "No"
                print(f"{ejemplo['nombre']:<25} ${ejemplo['monto']:<11,.0f} {recurrente:<12}")
            
            if costos_count > len(data["ejemplos_costos"]):
                print(f"... y {costos_count - len(data['ejemplos_costos'])} m√°s")
        
        # Mostrar ejemplos de impuestos
        if data["ejemplos_impuestos"]:
            print(f"\nüí∞ Ejemplos de impuestos eliminados:")
            print("-" * 50)
            print(f"{'Nombre':<20} {'Tipo':<12} {'Valor':<12}")
            print("-" * 50)
            
            for ejemplo in data["ejemplos_impuestos"]:
                if ejemplo['tipo'] == 'porcentaje':
                    valor_display = f"{ejemplo['valor']:.1f}%"
                else:
                    valor_display = f"${ejemplo['valor']:,.2f}"
                
                print(f"{ejemplo['nombre']:<20} {ejemplo['tipo']:<12} {valor_display:<12}")
            
            if impuestos_count > len(data["ejemplos_impuestos"]):
                print(f"... y {impuestos_count - len(data['ejemplos_impuestos'])} m√°s")
        
        print(f"\n‚ö†Ô∏è  Estos {total} registros pueden ser eliminados permanentemente")
    else:
        print(f"‚ùå {resultado['message']}")

def limpiar_costos_operativos_eliminados():
    """Ejecuta la limpieza permanente de costos operativos eliminados"""
    print("\n=== LIMPIEZA COSTOS OPERATIVOS ELIMINADOS ===")
    
    # Verificar qu√© se va a eliminar
    contador = controller.contar_registros_eliminados_controller()
    
    if not contador["success"]:
        print(f"‚ùå Error al verificar registros: {contador['message']}")
        return
    
    costos_count = contador["data"]["costos_eliminados"]
    
    if costos_count == 0:
        print("‚úÖ No hay costos operativos eliminados para limpiar")
        return
    
    print(f"‚ö†Ô∏è  Se encontraron {costos_count} costos operativos marcados como eliminados")
    
    # Mostrar algunos ejemplos
    ejemplos = contador["data"]["ejemplos_costos"]
    if ejemplos:
        print(f"\nüìã Algunos costos que ser√°n eliminados:")
        for ejemplo in ejemplos:
            print(f"   ‚Ä¢ {ejemplo['nombre']}: ${ejemplo['monto']:,.2f} ({'Recurrente' if ejemplo['recurrente'] else 'Una vez'})")
    
    print(f"\nüö® ADVERTENCIA:")
    print(f"   ‚Ä¢ Esta operaci√≥n eliminar√° PERMANENTEMENTE {costos_count} costos operativos")
    print(f"   ‚Ä¢ Los datos NO se podr√°n recuperar")
    print(f"   ‚Ä¢ Solo se eliminar√°n registros con activo=False")
    
    # Confirmaci√≥n doble
    confirmar1 = input(f"\n¬øContinuar con la eliminaci√≥n? (escrib√≠ 'CONFIRMAR'): ")
    
    if confirmar1 != 'CONFIRMAR':
        print("Operaci√≥n cancelada.")
        return
    
    confirmar2 = input(f"¬øEst√°s SEGURO de eliminar {costos_count} costos? (escrib√≠ 'ELIMINAR PERMANENTE'): ")
    
    if confirmar2 != 'ELIMINAR PERMANENTE':
        print("Operaci√≥n cancelada.")
        return
    
    print(f"\nüîÑ Eliminando costos operativos...")
    
    # Ejecutar la limpieza
    resultado = controller.limpiar_costos_operativos_eliminados_controller()
    
    if resultado["success"]:
        data = resultado["data"]
        print(f"\n‚úÖ {resultado['message']}")
        print(f"üìä Costos operativos eliminados: {data['registros_eliminados']}")
        
        if data['detalles']:
            print(f"   ‚Ä¢ Nombres eliminados:")
            for detalle in data['detalles'][:5]:  # Mostrar m√°ximo 5
                print(f"     - {detalle['nombre']}: ${detalle['monto']:,.2f}")
            
            if len(data['detalles']) > 5:
                print(f"     ... y {len(data['detalles']) - 5} m√°s")
        
        print(f"\nüéâ Limpieza de costos operativos completada!")
    else:
        print(f"‚ùå Error en la limpieza: {resultado['message']}")

def limpiar_impuestos_eliminados():
    """Ejecuta la limpieza permanente de impuestos eliminados"""
    print("\n=== LIMPIEZA IMPUESTOS ELIMINADOS ===")
    
    # Verificar qu√© se va a eliminar
    contador = controller.contar_registros_eliminados_controller()
    
    if not contador["success"]:
        print(f"‚ùå Error al verificar registros: {contador['message']}")
        return
    
    impuestos_count = contador["data"]["impuestos_eliminados"]
    
    if impuestos_count == 0:
        print("‚úÖ No hay impuestos eliminados para limpiar")
        return
    
    print(f"‚ö†Ô∏è  Se encontraron {impuestos_count} impuestos marcados como eliminados")
    
    # Mostrar algunos ejemplos
    ejemplos = contador["data"]["ejemplos_impuestos"]
    if ejemplos:
        print(f"\nüìã Algunos impuestos que ser√°n eliminados:")
        for ejemplo in ejemplos:
            if ejemplo['tipo'] == 'porcentaje':
                valor_display = f"{ejemplo['valor']:.1f}%"
            else:
                valor_display = f"${ejemplo['valor']:,.2f}"
            print(f"   ‚Ä¢ {ejemplo['nombre']} ({ejemplo['tipo']}): {valor_display}")
    
    print(f"\nüö® ADVERTENCIA:")
    print(f"   ‚Ä¢ Esta operaci√≥n eliminar√° PERMANENTEMENTE {impuestos_count} impuestos")
    print(f"   ‚Ä¢ Los datos NO se podr√°n recuperar")
    print(f"   ‚Ä¢ Solo se eliminar√°n registros con activo=False")
    
    # Confirmaci√≥n doble
    confirmar1 = input(f"\n¬øContinuar con la eliminaci√≥n? (escrib√≠ 'CONFIRMAR'): ")
    
    if confirmar1 != 'CONFIRMAR':
        print("Operaci√≥n cancelada.")
        return
    
    confirmar2 = input(f"¬øEst√°s SEGURO de eliminar {impuestos_count} impuestos? (escrib√≠ 'ELIMINAR PERMANENTE'): ")
    
    if confirmar2 != 'ELIMINAR PERMANENTE':
        print("Operaci√≥n cancelada.")
        return
    
    print(f"\nüîÑ Eliminando impuestos...")
    
    # Ejecutar la limpieza
    resultado = controller.limpiar_impuestos_eliminados_controller()
    
    if resultado["success"]:
        data = resultado["data"]
        print(f"\n‚úÖ {resultado['message']}")
        print(f"üìä Impuestos eliminados: {data['registros_eliminados']}")
        
        if data['detalles']:
            print(f"   ‚Ä¢ Nombres eliminados:")
            for detalle in data['detalles'][:5]:  # Mostrar m√°ximo 5
                if detalle['tipo'] == 'porcentaje':
                    valor_display = f"{detalle['valor']:.1f}%"
                else:
                    valor_display = f"${detalle['valor']:,.2f}"
                print(f"     - {detalle['nombre']}: {valor_display}")
            
            if len(data['detalles']) > 5:
                print(f"     ... y {len(data['detalles']) - 5} m√°s")
        
        print(f"\nüéâ Limpieza de impuestos completada!")
    else:
        print(f"‚ùå Error en la limpieza: {resultado['message']}")

def limpiar_todos_los_eliminados():
    """Ejecuta la limpieza permanente de TODOS los registros eliminados"""
    print("\n=== LIMPIEZA COMPLETA DE REGISTROS ELIMINADOS ===")
    
    # Verificar qu√© se va a eliminar
    contador = controller.contar_registros_eliminados_controller()
    
    if not contador["success"]:
        print(f"‚ùå Error al verificar registros: {contador['message']}")
        return
    
    data = contador["data"]
    total = data["total"]
    costos_count = data["costos_eliminados"]
    impuestos_count = data["impuestos_eliminados"]
    
    if total == 0:
        print("‚úÖ No hay registros eliminados para limpiar")
        return
    
    print(f"‚ö†Ô∏è  Se encontraron {total} registros marcados como eliminados:")
    print(f"   ‚Ä¢ Costos operativos: {costos_count}")
    print(f"   ‚Ä¢ Impuestos: {impuestos_count}")
    
    print(f"\nüö® ADVERTENCIA CR√çTICA:")
    print(f"   ‚Ä¢ Esta operaci√≥n eliminar√° PERMANENTEMENTE TODOS los registros eliminados")
    print(f"   ‚Ä¢ Se eliminar√°n {total} registros de ambas tablas")
    print(f"   ‚Ä¢ Los datos NO se podr√°n recuperar JAM√ÅS")
    print(f"   ‚Ä¢ Solo se eliminar√°n registros con activo=False")
    
    # Confirmaci√≥n triple para operaci√≥n cr√≠tica
    confirmar1 = input(f"\n¬øContinuar con la eliminaci√≥n COMPLETA? (escrib√≠ 'CONFIRMAR'): ")
    
    if confirmar1 != 'CONFIRMAR':
        print("Operaci√≥n cancelada.")
        return
    
    confirmar2 = input(f"¬øEst√°s SEGURO de eliminar {total} registros? (escrib√≠ 'ELIMINAR TODO'): ")
    
    if confirmar2 != 'ELIMINAR TODO':
        print("Operaci√≥n cancelada.")
        return
    
    confirmar3 = input(f"√öLTIMA CONFIRMACI√ìN - ¬øEliminar {total} registros PERMANENTEMENTE? (escrib√≠ 'S√ç, ELIMINAR TODO'): ")
    
    if confirmar3 != 'S√ç, ELIMINAR TODO':
        print("Operaci√≥n cancelada.")
        return
    
    print(f"\nüîÑ Eliminando TODOS los registros marcados como eliminados...")
    
    # Ejecutar la limpieza completa
    resultado = controller.limpiar_todos_los_eliminados_controller()
    
    if resultado["success"]:
        data = resultado["data"]
        print(f"\n‚úÖ {resultado['message']}")
        print(f"üìä Resumen de la limpieza:")
        print(f"   ‚Ä¢ Costos operativos eliminados: {data['costos_eliminados']}")
        print(f"   ‚Ä¢ Impuestos eliminados: {data['impuestos_eliminados']}")
        print(f"   ‚Ä¢ TOTAL ELIMINADO: {data['total_eliminados']}")
        
        print(f"\nüéâ ¬°Limpieza completa terminada exitosamente!")
        print(f"üóÑÔ∏è  Base de datos optimizada - {data['total_eliminados']} registros liberados")
    else:
        print(f"‚ùå Error en la limpieza: {resultado['message']}")

def menu_limpieza():
    """Submen√∫ para operaciones de limpieza"""
    while True:
        print("\n=== LIMPIEZA DE REGISTROS ELIMINADOS ===")
        print("1. Ver registros eliminados")
        print("2. Limpiar solo costos operativos")
        print("3. Limpiar solo impuestos")
        print("4. Limpiar TODOS los registros eliminados")
        print("5. Volver al men√∫ principal")
        
        opcion = input("Eleg√≠ una opci√≥n: ")
        
        if opcion == "1":
            mostrar_registros_eliminados()
        elif opcion == "2":
            limpiar_costos_operativos_eliminados()
        elif opcion == "3":
            limpiar_impuestos_eliminados()
        elif opcion == "4":
            limpiar_todos_los_eliminados()
        elif opcion == "5":
            break
        else:
            print("‚ùå Opci√≥n inv√°lida.")

def menu_costos():
    """Men√∫ principal del sistema de costos"""
    while True:
        print("\n" + "="*60)
        print("üí∞ SISTEMA DE GESTI√ìN DE COSTOS E IMPUESTOS")
        print("="*60)
        print("1. Ver resumen general")
        print("2. Ver costos operativos")
        print("3. Ver impuestos")
        print("4. Gestionar costos operativos")
        print("5. Gestionar impuestos")
        print("6. Crear costo operativo r√°pido")
        print("7. Crear impuesto r√°pido")
        print("8. Limpieza de registros eliminados")
        print("9. Salir")
        print("="*60)

        opcion = input("Eleg√≠ una opci√≥n: ")

        if opcion == "1":
            mostrar_resumen_general()

        elif opcion == "2":
            mostrar_costos_operativos()

        elif opcion == "3":
            mostrar_impuestos()

        elif opcion == "4":
            gestion_costos_operativos()

        elif opcion == "5":
            gestion_impuestos()

        elif opcion == "6":
            crear_costo_operativo()

        elif opcion == "7":
            crear_impuesto()

        elif opcion == "8":
            menu_limpieza()

        elif opcion == "9":
            print("üëã Saliendo del sistema de costos.")
            break

        else:
            print("‚ùå Opci√≥n inv√°lida.")

if __name__ == "__main__":
    menu_costos()

# Ejecutar con: python -m aplicacion.backend.costos.test_costos